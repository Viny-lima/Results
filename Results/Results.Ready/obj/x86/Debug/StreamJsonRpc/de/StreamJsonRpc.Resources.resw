<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="TaskWasCancelled" xml:space="preserve">
    <value>Die Aufgabe wurde abgebrochen.</value>
  </data>
  <data name="StreamDisposed" xml:space="preserve">
    <value>Der Datenstrom wurde verworfen.</value>
  </data>
  <data name="InboundMessageOnly" xml:space="preserve">
    <value>Dieser Vorgang ist nur für eingehende Nachrichten geeignet.</value>
  </data>
  <data name="UnableToFindMethod" xml:space="preserve">
    <value>Die Methode "{0}/{1}" für {2} kann aus den folgenden Gründen nicht gefunden werden: {3}</value>
  </data>
  <data name="ReservedPropertyName" xml:space="preserve">
    <value>Dieser Eigenschaftsname ist von der JSON-RPC-Spezifikation oder dieser Bibliothek reserviert.</value>
  </data>
  <data name="OutboundMessageOnly" xml:space="preserve">
    <value>Dieser Vorgang ist nur für ausgehende Nachrichten geeignet.</value>
  </data>
  <data name="ResponseIsNotError" xml:space="preserve">
    <value>Die Antwort ist kein Fehler.</value>
  </data>
  <data name="UnexpectedErrorProcessingJsonRpc" xml:space="preserve">
    <value>Unerwarteter Fehler beim Verarbeiten der JSON-RPC-Nachricht: {0}</value>
  </data>
  <data name="CancellationTokenMustBeLastParameter" xml:space="preserve">
    <value>Ein CancellationToken ist nur als letzter Parameter zulässig.</value>
  </data>
  <data name="ElementsAlreadyPrefetched" xml:space="preserve">
    <value>Diese Enumeration hat zuvor bereits Elemente vorab abgerufen.</value>
  </data>
  <data name="UsableOnceOnly" xml:space="preserve">
    <value>Dieser Vorgang kann nur einmal auf diesem Objekt ausgeführt werden.</value>
  </data>
  <data name="TypedArgumentsLengthMismatch" xml:space="preserve">
    <value>Die Länge dieser Liste muss der Länge der Argumentliste entsprechen.</value>
  </data>
  <data name="UnsupportedEventHandlerTypeOnClientProxyInterface" xml:space="preserve">
    <value>Nicht unterstützter Ereignishandlertyp auf "{0}". Nur EventHandler und EventHandler&lt;T&gt; werden unterstützt.</value>
  </data>
  <data name="ParameterObjectsNotSupportedInJsonRpc10" xml:space="preserve">
    <value>JSON-RPC 1.0 unterstützt keine benannten Argumente (innerhalb eines Objekts übergebene Parameter). Verwenden Sie Positionsargumente (Parameterarrays), oder legen Sie die Protokollversion auf 2.0 fest.</value>
  </data>
  <data name="TargetObjectAndMethodStaticFlagMismatch" xml:space="preserve">
    <value>Ein Zielobjekt darf nur angegeben werden, wenn die Methode nicht statisch ist.</value>
  </data>
  <data name="UnrecognizedIncomingJsonRpc" xml:space="preserve">
    <value>Die eingehende JSON-RPC-Nachricht entsprach keinem bekannten Muster.</value>
  </data>
  <data name="UnexpectedResponseWithNoMatchingRequest" xml:space="preserve">
    <value>Es wurde eine Antwort empfangen, ohne dass eine Anforderung gesendet wurde.</value>
  </data>
  <data name="TextEncoderNotApplicable" xml:space="preserve">
    <value>Die Textcodierung wird nicht unterstützt, weil "{1}" vom Formatierer "{0}" nicht implementiert wird.</value>
  </data>
  <data name="MarshalableInterfaceHasProperties" xml:space="preserve">
    <value>Schnittstellen mit Eigenschaften können nicht gemarshallt werden.</value>
  </data>
  <data name="ConflictingMethodNameAttribute" xml:space="preserve">
    <value>Alle Überladungen und Überschreibungen der Methode "{0}" müssen einen gemeinsamen Wert für {1} aufweisen.{2}.</value>
  </data>
  <data name="ReadingJsonRpcStreamFailed" xml:space="preserve">
    <value>Fehler beim Lesen des JSON-RPC aus dem Datenstrom mit {0}: {1}</value>
  </data>
  <data name="ConnectionDropped" xml:space="preserve">
    <value>Die JSON-RPC-Verbindung mit der Gegenseite ging verloren, bevor die Anforderung abgeschlossen werden konnte.</value>
  </data>
  <data name="DroppingRequestDueToNoTargetObject" xml:space="preserve">
    <value>Eine Anforderung zum Ausführen von "{0}" wurde erhalten, es ist aber kein Rückrufobjekt vorhanden. Die Anforderung wird gelöscht.</value>
  </data>
  <data name="FormatterConfigurationLockedAfterJsonRpcAssigned" xml:space="preserve">
    <value>Die Konfiguration ist gesperrt, weil dieser Formatierer bereits einer JsonRpc-Instanz zugeordnet wurde.</value>
  </data>
  <data name="PositiveIntegerRequired" xml:space="preserve">
    <value>Ein positiver Integerwert ist erforderlich.</value>
  </data>
  <data name="StreamMustBeWriteable" xml:space="preserve">
    <value>In den Datenstrom muss geschrieben werden können.</value>
  </data>
  <data name="ResponseUnexpectedFormat" xml:space="preserve">
    <value>Die Antwort weist ein unerwartetes Format auf. Es werden nur Fehler und Ergebnisse unterstützt: {0}</value>
  </data>
  <data name="JsonRpcCannotBeNull" xml:space="preserve">
    <value>Der JSON-RPC darf nicht NULL sein.</value>
  </data>
  <data name="BothReadableWritableAreNull" xml:space="preserve">
    <value>"readable" und "writable" sind NULL.</value>
  </data>
  <data name="FillBufferFirst" xml:space="preserve">
    <value>Der Puffer ist leer. Rufen Sie die asynchrone Methode auf, um ihn zuerst mit Daten aufzufüllen.</value>
  </data>
  <data name="ReachedEndOfStream" xml:space="preserve">
    <value>Das Ende des Datenstroms wurde erreicht.</value>
  </data>
  <data name="HeaderValueTooLarge" xml:space="preserve">
    <value>Die Größe der Nachrichtenheaders überschreitet die maximal unterstützte Größe.</value>
  </data>
  <data name="ResponseSerializationFailure" xml:space="preserve">
    <value>Fehler beim Serialisieren der Antwort.</value>
  </data>
  <data name="MarshalableInterfaceNotDisposable" xml:space="preserve">
    <value>Gemarshallte Schnittstellen müssen IDisposable erweitern.</value>
  </data>
  <data name="FailureDeserializingJsonRpc" xml:space="preserve">
    <value>Fehler beim Deserialisieren des eingehenden JSON-RPC "{0}": {1}</value>
  </data>
  <data name="JsonRpcMethodAndIgnoreAttributesFound" xml:space="preserve">
    <value>In Konflikt stehendes „JsonRpcMethodAttribute“ und „JsonRpcIgnoreAttribute“ wurden für dieselbe Methode gefunden: {0}.</value>
  </data>
  <data name="RpcMethodNameNotFound" xml:space="preserve">
    <value>Keine Methode mit dem Namen "{0}" gefunden.</value>
  </data>
  <data name="SumOfTwoParametersExceedsArrayLength" xml:space="preserve">
    <value>Die Parameter {0} und {1} überschreiten die Länge des Arrays.</value>
  </data>
  <data name="UnsupportedPropertiesOnClientProxyInterface" xml:space="preserve">
    <value>Eigenschaften werden für Dienstschnittstellen nicht unterstützt.</value>
  </data>
  <data name="NonNegativeIntegerRequired" xml:space="preserve">
    <value>Ein nicht negativer Integerwert ist erforderlich.</value>
  </data>
  <data name="MethodParametersNotCompatible" xml:space="preserve">
    <value>{0}-Parameter sind nicht kompatibel mit den in der Anforderung angegebenen Argumenten.</value>
  </data>
  <data name="MustBeListening" xml:space="preserve">
    <value>Zunächst muss das Lauschen gestartet werden.</value>
  </data>
  <data name="ParameterNotObject" xml:space="preserve">
    <value>Der Parameter liegt nicht im Format eines einzelnen Objekts vor.</value>
  </data>
  <data name="MustNotBeListening" xml:space="preserve">
    <value>Dieser Vorgang kann nicht ausgeführt werden, nachdem das Lauschen gestartet wurde.</value>
  </data>
  <data name="MarshalableInterfaceHasEvents" xml:space="preserve">
    <value>Schnittstellen mit Ereignissen können nicht gemarshallt werden.</value>
  </data>
  <data name="InvalidAfterListenHasStarted" xml:space="preserve">
    <value>Dieser Vorgang ist unzulässig, nachdem das Lauschen auf Nachrichten gestartet wurde.</value>
  </data>
  <data name="HeaderContentLengthNotParseable" xml:space="preserve">
    <value>Fehler beim Analysieren des Content-Length-Headers in einen positiven Integerwert.</value>
  </data>
  <data name="RelayAlreadySet" xml:space="preserve">
    <value>Die Relayverbindung wurde bereits eingerichtet.</value>
  </data>
  <data name="FailureDeserializingRpcResult" xml:space="preserve">
    <value>Fehler beim Deserialisieren des JSON-RPC-Ergebnisses in den Typ "{0}". {1}: {2}</value>
  </data>
  <data name="TaskNotCompleted" xml:space="preserve">
    <value>Der Task wurde nicht abgeschlossen.</value>
  </data>
  <data name="MethodHasRefOrOutParameters" xml:space="preserve">
    <value>{0} weist ref- oder out-Parameter auf. Dies wird nicht unterstützt.</value>
  </data>
  <data name="FailureDeserializingRpcArgument" xml:space="preserve">
    <value>Fehler beim Deserialisieren des JSON-RPC-Arguments mit dem Namen "{0}" und der Position {1} in den Typ "{2}": {3}</value>
  </data>
  <data name="InvalidBeforeListenHasStarted" xml:space="preserve">
    <value>Dieser Vorgang ist unzulässig, bevor das Lauschen auf Nachrichten gestartet wurde.</value>
  </data>
  <data name="NotSupportedWithoutMultiplexingStream" xml:space="preserve">
    <value>Out-of-Band-Streams/-Pipes werden in dieser Konfiguration nicht unterstützt. Haben Sie einen MultiplexingStream für den Formatierer festgelegt?</value>
  </data>
  <data name="RequiredArgumentMissing" xml:space="preserve">
    <value>Für einen erforderlichen Parameter wurde ein Argument nicht angegeben.</value>
  </data>
  <data name="ConflictingMethodAttributeValue" xml:space="preserve">
    <value>Die .NET-Methoden "{0}" und "{1}" können nicht beide dem gleichen Anforderungsmethodennamen zugeordnet werden: "{2}".</value>
  </data>
  <data name="StreamMustBeReadable" xml:space="preserve">
    <value>Der Datenstrom muss lesbar sein.</value>
  </data>
  <data name="ErrorWritingJsonRpcMessage" xml:space="preserve">
    <value>Fehler beim Schreiben der JSON-RPC-Nachricht: {0}: {1}</value>
  </data>
  <data name="EnumValueNotRecognized" xml:space="preserve">
    <value>Der Wert "{0}" gehört nicht zu den erkannten oder unterstützten Membern des Enumerationstyps.</value>
  </data>
  <data name="MarshaledObjectInResponseOrNotificationError" xml:space="preserve">
    <value>Dieses nachverfolgte Objekt darf nicht Teil einer Antwort oder Benachrichtigung sein.</value>
  </data>
  <data name="MethodParameterCountDoesNotMatch" xml:space="preserve">
    <value>{0}-Parameter (ausschließlich CancellationToken): {1}, die Anforderung stellt aber {2} bereit.</value>
  </data>
  <data name="CannotBeCalledAfterGetAsyncEnumerator" xml:space="preserve">
    <value>Dies ist nicht möglich, nachdem GetAsyncEnumerator bereits aufgerufen wurde.</value>
  </data>
  <data name="UnsupportedJsonRpcProtocolVersion" xml:space="preserve">
    <value>Nicht unterstützte JSON-RPC-Protokollversion: {0}. Folgende Protokollversionen werden unterstützt: {1}</value>
  </data>
  <data name="FatalExceptionWasThrown" xml:space="preserve">
    <value>Eine schwerwiegende Ausnahme wurde von der Servermethode "{0}" ausgelöst: {1}</value>
  </data>
  <data name="UnexpectedTokenReadingHeader" xml:space="preserve">
    <value>Unerwartetes Token "{0}" beim Analysieren des Headers.</value>
  </data>
  <data name="ConflictMethodSignatureAlreadyRegistered" xml:space="preserve">
    <value>Es wurde bereits eine Methode mit diesem Namen und identischen Parametern registriert.</value>
  </data>
  <data name="ErrorWritingJsonRpcResult" xml:space="preserve">
    <value>Fehler beim Schreiben des JSON-RPC-Ergebnisses: {0}: {1}</value>
  </data>
  <data name="ClientProxyTypeArgumentMustBeAnInterface" xml:space="preserve">
    <value>"{0}" ist keine Schnittstelle.</value>
  </data>
  <data name="UnrecognizableMessage" xml:space="preserve">
    <value>Die eingehende Nachricht wurde nicht als einer der definierten JSON-RPC 2.0-Nachrichtentypen erkannt.</value>
  </data>
  <data name="MarshaledObjectInNotificationError" xml:space="preserve">
    <value>Dieses nachverfolgte Objekt kann nicht in eine Benachrichtigung einbezogen werden. Nur Nachrichten mit einer id-Eigenschaft werden unterstützt.</value>
  </data>
  <data name="UnsupportedGenericMethodsOnClientProxyInterface" xml:space="preserve">
    <value>Generische Methoden werden nicht unterstützt.</value>
  </data>
  <data name="FindIProgressOfTError" xml:space="preserve">
    <value>Der angegebene Typ kann nicht in IProgress&lt;T&gt; umgewandelt werden.</value>
  </data>
  <data name="UnknownTokenToMarshaledObject" xml:space="preserve">
    <value>Dieses Remoteobjekt ist nicht mehr vorhanden.</value>
  </data>
  <data name="UnsupportedMethodReturnTypeOnClientProxyInterface" xml:space="preserve">
    <value>Die Methode "{0}" weist einen nicht unterstützten Rückgabetyp "{1}" auf. Es werden nur Methoden unterstützt, die Tasks zurückgeben.</value>
  </data>
</root>