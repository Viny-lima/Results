<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="SyncContextFrameMismatchedAffinity" xml:space="preserve">
    <value>此框架已与其他实例一起使用。</value>
  </data>
  <data name="JoinableTaskContextAndCollectionMismatch" xml:space="preserve">
    <value>JoinableTask 不属于之前用于实例化此集合的上下文。</value>
  </data>
  <data name="LazyValueFaulted" xml:space="preserve">
    <value>延迟创建的值在构造期间出错。</value>
  </data>
  <data name="SwitchToMainThreadFailedToReachExpectedThread" xml:space="preserve">
    <value>尝试切换到主线程未能到达预期线程。JoinableTaskContext 在错误的线程上进行了初始化，还是其 SynchronizationContext 的 Post 方法未在主线程上执行其委托？</value>
  </data>
  <data name="PushFromWrongThread" xml:space="preserve">
    <value>消息泵只能从原始线程中运行。</value>
  </data>
  <data name="CannotUpgradeNonUpgradeableLock" xml:space="preserve">
    <value>不可升级的读取锁由调用方持有，无法升级。</value>
  </data>
  <data name="MultipleContinuationsNotSupported" xml:space="preserve">
    <value>不支持多个延续。</value>
  </data>
  <data name="WriteLockOutlived" xml:space="preserve">
    <value>写锁定以嵌套读锁定为生存期，这是不允许的。</value>
  </data>
  <data name="JoinableTaskContextNodeAlreadyRegistered" xml:space="preserve">
    <value>此节点已注册。</value>
  </data>
  <data name="InvalidLock" xml:space="preserve">
    <value>只能对有效锁执行此操作。</value>
  </data>
  <data name="SemaphoreAlreadyHeld" xml:space="preserve">
    <value>信号灯已被占用，并且重新进入的设置为 "{0}"。</value>
  </data>
  <data name="NotAllowedUnderURorWLock" xml:space="preserve">
    <value>持有来自 AsyncReaderWriterLock 的活动的可升级的读或写锁定时不允许执行此操作。</value>
  </data>
  <data name="SemaphoreMisused" xml:space="preserve">
    <value>此信号量已被误用, 无法再使用。</value>
  </data>
  <data name="LockCompletionAlreadyRequested" xml:space="preserve">
    <value>此所已标记为完成。没有可用的新的顶级锁。</value>
  </data>
  <data name="InvalidAfterCompleted" xml:space="preserve">
    <value>已经过渡到完成状态。</value>
  </data>
  <data name="FrameMustBePushedFirst" xml:space="preserve">
    <value>必须先推送此实例。</value>
  </data>
  <data name="STAThreadCallerNotAllowed" xml:space="preserve">
    <value>无法在 STA 线程上完成此操作。</value>
  </data>
  <data name="ValueFactoryReentrancy" xml:space="preserve">
    <value>值工厂已对相同实例调用了值。</value>
  </data>
  <data name="LazyValueNotCreated" xml:space="preserve">
    <value>尚未构造延迟创建的值。</value>
  </data>
  <data name="AppliedSynchronizationContextNotAllowed" xml:space="preserve">
    <value>不允许获取已应用 SynchronizationContext 的线程上的锁。</value>
  </data>
  <data name="InvalidWithoutLock" xml:space="preserve">
    <value>锁是必需项。</value>
  </data>
  <data name="SemaphoreStackNestingViolated" xml:space="preserve">
    <value>当可重入设置为: "{0}" 时, 嵌套的信号量请求必须以后进先出顺序释放</value>
  </data>
  <data name="DangerousReadLockRequestFromWriteLockFork" xml:space="preserve">
    <value>来自写锁分叉的危险的读锁请求。</value>
  </data>
  <data name="QueueEmpty" xml:space="preserve">
    <value>队列为空。</value>
  </data>
  <data name="SyncContextNotSet" xml:space="preserve">
    <value>未设置要到达主线程的 SynchronizationContext。</value>
  </data>
</root>