<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="SyncContextFrameMismatchedAffinity" xml:space="preserve">
    <value>Ce frame a déjà été utilisé avec une autre instance.</value>
  </data>
  <data name="JoinableTaskContextAndCollectionMismatch" xml:space="preserve">
    <value>JoinableTask n'appartient pas au contexte avec lequel cette collection a été instanciée.</value>
  </data>
  <data name="LazyValueFaulted" xml:space="preserve">
    <value>La valeur créée tardivement a provoqué un échec pendant la construction.</value>
  </data>
  <data name="SwitchToMainThreadFailedToReachExpectedThread" xml:space="preserve">
    <value>Une tentative de basculement sur le thread principal n’a pas réussi à atteindre le thread attendu. JoinableTaskContext a-t-il été initialisé sur le mauvais thread ou avec un SynchronizationContext dont la méthode Post n’exécute pas son délégué sur le thread principal ?</value>
  </data>
  <data name="PushFromWrongThread" xml:space="preserve">
    <value>La pompe de messages peut uniquement être exécutée à partir du thread d'origine.</value>
  </data>
  <data name="CannotUpgradeNonUpgradeableLock" xml:space="preserve">
    <value>L'appelant possède un verrou en lecture qui ne peut pas être mis à niveau et la mise à niveau est impossible.</value>
  </data>
  <data name="MultipleContinuationsNotSupported" xml:space="preserve">
    <value>Plusieurs continuations ne sont pas prises en charge.</value>
  </data>
  <data name="WriteLockOutlived" xml:space="preserve">
    <value>Un verrou en écriture a vécu moins longtemps qu'un verrou en lecture imbriqué, ce qui n'est pas autorisé.</value>
  </data>
  <data name="JoinableTaskContextNodeAlreadyRegistered" xml:space="preserve">
    <value>Ce nœud est déjà inscrit.</value>
  </data>
  <data name="InvalidLock" xml:space="preserve">
    <value>Cette opération peut seulement être exécutée sur un verrou valide.</value>
  </data>
  <data name="SemaphoreAlreadyHeld" xml:space="preserve">
    <value>Le sémaphore est déjà détenu et le paramètre de réentrance est '{0}'.</value>
  </data>
  <data name="NotAllowedUnderURorWLock" xml:space="preserve">
    <value>Cette opération n'est pas autorisée durant l'application d'un verrou actif en lecture ou en écriture pouvant être mis à niveau à partir de AsyncReaderWriterLock.</value>
  </data>
  <data name="SemaphoreMisused" xml:space="preserve">
    <value>Ce sémaphore a été utilisé à mauvais escient et ne peut plus être utilisé.</value>
  </data>
  <data name="LockCompletionAlreadyRequested" xml:space="preserve">
    <value>Ce verrou a déjà été marqué pour achèvement.  Aucun nouveau verrou de niveau supérieur ne peut être pris en charge.</value>
  </data>
  <data name="InvalidAfterCompleted" xml:space="preserve">
    <value>Déjà passé à l'état Terminé.</value>
  </data>
  <data name="FrameMustBePushedFirst" xml:space="preserve">
    <value>Cette instance doit d'abord faire l'objet d'un envoi (push).</value>
  </data>
  <data name="STAThreadCallerNotAllowed" xml:space="preserve">
    <value>Impossible d'achever cette opération sur un thread STA.</value>
  </data>
  <data name="ValueFactoryReentrancy" xml:space="preserve">
    <value>La fabrique de valeurs a fait appel à la valeur sur la même instance.</value>
  </data>
  <data name="LazyValueNotCreated" xml:space="preserve">
    <value>La valeur créée tardivement n'a pas encore été construite.</value>
  </data>
  <data name="AppliedSynchronizationContextNotAllowed" xml:space="preserve">
    <value>L'acquisition de verrous sur des threads avec application d'un SynchronizationContext n'est pas autorisée.</value>
  </data>
  <data name="InvalidWithoutLock" xml:space="preserve">
    <value>Un verrou est requis.</value>
  </data>
  <data name="SemaphoreStackNestingViolated" xml:space="preserve">
    <value>Les demandes de sémaphore imbriquées doivent être diffusées dans l'ordre du dernier entré, premier sorti (LIFO) quand le paramètre de réentrance est : '{0}'</value>
  </data>
  <data name="DangerousReadLockRequestFromWriteLockFork" xml:space="preserve">
    <value>Demande dangereuse de verrou en lecture à partir d'une bifurcation d'un verrou en écriture.</value>
  </data>
  <data name="QueueEmpty" xml:space="preserve">
    <value>La file d'attente est vide.</value>
  </data>
  <data name="SyncContextNotSet" xml:space="preserve">
    <value>Aucun SynchronizationContext permettant d'atteindre le thread principal n'a été défini.</value>
  </data>
</root>